
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

predicate _Unchanged{K, L}(intP[..] a, integer first, integer last) =
(\forall integer i_1;
  (((first <= i_1) && (i_1 < last)) ==>
    (\at((a + i_1).intM,K) == \at((a + i_1).intM,L))))

predicate _Unchanged_0{K, L}(intP[..] a_0, integer n_1) =
_Unchanged{K, L}(a_0, 0, n_1)

lemma UnchangedStep{K, L} :
(_C_1 : (\forall intP[..] a_1;
          (\forall integer n_2;
            ((0 <= n_2) ==>
              (_Unchanged_0{K,
                L}(a_1, n_2) ==>
                ((\at((a_1 + n_2).intM,K) == \at((a_1 + n_2).intM,L)) ==>
                  _Unchanged_0{K,
                  L}(a_1, (n_2 + 1))))))))

lemma UnchangedSection{K, L} :
(_C_2 : (\forall intP[..] a_2;
          (\forall integer m;
            (\forall integer n_3;
              (((0 <= m) && (m <= n_3)) ==>
                (_Unchanged_0{K, L}(a_2, n_3) ==> _Unchanged_0{K, L}(a_2, m)))))))

predicate _Swap{L1, L2}(intP[..] a_3, integer i_2, integer j_0) =
(((\at((a_3 + i_2).intM,L1) == \at((a_3 + j_0).intM,L2)) &&
   (\at((a_3 + j_0).intM,L1) == \at((a_3 + i_2).intM,L2))) &&
  (\forall integer k_1;
    (((k_1 != i_2) && (k_1 != j_0)) ==>
      (\at((a_3 + k_1).intM,L1) == \at((a_3 + k_1).intM,L2)))))

predicate _HasValue{A}(intP[..] b, integer n_4, integer k_2) =
(\exists integer i_3;
  ((i_3 == n_4) && (((b + i_3).intM :> integer) == k_2)))

axiomatic MaxInd {

  logic integer max_ind{L}(intP[..] a_4, uint32 n_5)
   
  axiom a1{L} :
  (_C_3 : (\forall intP[..] a_5;
            (\forall uint32 n_6;
              ((0 <= max_ind{L}(a_5, n_6)) &&
                (max_ind{L}(a_5, n_6) <= (n_6 :> integer))))))
   
  axiom a2{L} :
  (_C_4 : (\forall intP[..] a_6;
            (\forall uint32 n_7;
              (\forall integer i_4;
                (((0 <= i_4) && (i_4 < (n_7 :> integer))) ==>
                  ((a_6 + i_4).intM <= (a_6 + max_ind{L}(a_6, n_7)).intM))))))
  
}

int32 size_b;

unit task(intP[..] a, intP[..] b, uint32 size_a)
  requires ((_C_44 : (((size_a :> integer) % 2) == 0)) &&
             ((_C_45 : \at((if (\at(0,Here) <=
                                 \at(((size_a :> integer) - 1),Here)) then 
                           (((\offset_min(\at(a,Here)) <= \at(0,Here)) &&
                              (\offset_max(\at(a,Here)) >=
                                \at(((size_a :> integer) - 1),Here))) &&
                             (\forall integer __framac_tmp1;
                               (((\at(0,Here) <= __framac_tmp1) &&
                                  (__framac_tmp1 <=
                                    \at(((size_a :> integer) - 1),Here))) ==>
                                 true))) else true),Here)) &&
               ((_C_46 : \at((if (\at(0,Here) <=
                                   \at(max_ind{Here}(a, size_a),Here)) then 
                             (((\offset_min(\at(b,Here)) <= \at(0,Here)) &&
                                (\offset_max(\at(b,Here)) >=
                                  \at(max_ind{Here}(a, size_a),Here))) &&
                               (\forall integer __framac_tmp2;
                                 (((\at(0,Here) <= __framac_tmp2) &&
                                    (__framac_tmp2 <=
                                      \at(max_ind{Here}(a, size_a),Here))) ==>
                                   true))) else true),Here)) &&
                 ((_C_47 : (\forall integer k_4;
                             (((0 <= k_4) && (k_4 < (size_a :> integer))) ==>
                               ((a + k_4).intM < size_b)))) &&
                   ((_C_48 : (\forall integer k_5;
                               (((0 <= k_5) && (k_5 < (size_a :> integer))) ==>
                                 _HasValue{Here}(b, (size_b :> integer),
                                                 ((a + k_5).intM :> integer))))) &&
                     (_C_49 : (\exists integer mx;
                                ((((0 <= mx) && (mx < (size_a :> integer))) &&
                                   (\forall integer k_6;
                                     (((0 <= k_6) &&
                                        (k_6 < (size_a :> integer))) ==>
                                       ((a + k_6).intM <= (a + mx).intM)))) &&
                                  \at((if (\at(0,Here) <=
                                            \at((a + mx).intM,Here)) then 
                                      (((\offset_min(\at(b,Here)) <=
                                          \at(0,Here)) &&
                                         (\offset_max(\at(b,Here)) >=
                                           \at((a + mx).intM,Here))) &&
                                        (\forall integer __framac_tmp3;
                                          (((\at(0,Here) <= __framac_tmp3) &&
                                             (__framac_tmp3 <=
                                               \at((a + mx).intM,Here))) ==>
                                            true))) else true),Here)))))))));
behavior default:
  ensures (_C_41 : ((_C_42 : _Unchanged_0{Old,
                    Here}(\at(b,Old), (size_b :> integer))) &&
                     (_C_43 : _Unchanged_0{Old,
                     Here}(\at(a,Old), (\at(size_a,Old) :> integer)))));
{  
   (var uint32 i);
   
   (var int32 tmp);
   
   {  (_C_5 : (i = (0 :> uint32)));
      
      loop 
      behavior default:
        invariant (_C_10 : ((_C_11 : (0 <= (i :> integer))) &&
                             (_C_12 : ((i :> integer) <=
                                        ((size_a :> integer) + 1)))));
      behavior default:
        invariant (_C_9 : (((i :> integer) % 2) == 0));
      behavior default:
        invariant (_C_8 : _Unchanged_0{Pre, Here}(b, (size_b :> integer)));
      behavior default:
        invariant (_C_7 : (\forall integer k_3;
                            (((0 <= k_3) && (k_3 < (size_a :> integer))) ==>
                              _HasValue{Here}(b, (size_b :> integer),
                                              ((a + k_3).intM :> integer)))));
      behavior default:
        
        assigns i,
        b;
      variant (_C_6 : ((size_a :> integer) - (i :> integer)));
      while (true)
      {  
         {  (if (_C_13 : (i < size_a)) then () else 
            (goto while_0_break));
            
            {  (_C_18 : (tmp = (_C_17 : (_C_16 : (b +
                                                   (_C_15 : (_C_14 : (a + i)).intM))).intM)));
               (_C_29 : ((_C_28 : (_C_27 : (b +
                                             (_C_26 : (_C_25 : (a + i)).intM))).intM) = 
               (_C_24 : (_C_23 : (b +
                                   (_C_22 : (_C_21 : (a +
                                                       (_C_20 : ((_C_19 : 
                                                                 (i +
                                                                   (1 :> uint32))) :> uint32)))).intM))).intM)));
               (_C_36 : ((_C_35 : (_C_34 : (b +
                                             (_C_33 : (_C_32 : (a +
                                                                 (_C_31 : (
                                                                 (_C_30 : 
                                                                 (i +
                                                                   (1 :> uint32))) :> uint32)))).intM))).intM) = tmp));
               
               {  
                  (assert for default: (_C_37 : (jessie : _Swap{Pre,
                                                Here}(b,
                                                      ((a + (i :> integer)).intM :> integer),
                                                      ((a +
                                                         ((i :> integer) + 1)).intM :> integer)))));
                  ()
               }
            };
            (_C_40 : (i = (_C_39 : ((_C_38 : (i + (2 :> uint32))) :> uint32))))
         }
      };
      (while_0_break : ());
      
      (return ())
   }
}
